/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { ProblemResponse, UserInfoResponse } from "../models/index";
import { ProblemResponseFromJSON, ProblemResponseToJSON, UserInfoResponseFromJSON, UserInfoResponseToJSON } from "../models/index";

/**
 *
 */
export class GeneralApi extends runtime.BaseAPI {
    /**
     * Fetch detailed information about your user account.
     */
    async getUserInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/general/user-info`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoResponseFromJSON(jsonValue));
    }

    /**
     * Fetch detailed information about your user account.
     */
    async getUserInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfoResponse> {
        const response = await this.getUserInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Health check request to test if Kameleo has been started and accepting connections.
     */
    async healthcheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/general/healthcheck`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Health check request to test if Kameleo has been started and accepting connections.
     */
    async healthcheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.healthcheckRaw(initOverrides);
    }

    /**
     * Terminate your current Kameleo session by deauthenticating and exiting the CLI. Use this to safely close your session and release any  associated resources.
     */
    async terminateApplicationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/general/terminate`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Terminate your current Kameleo session by deauthenticating and exiting the CLI. Use this to safely close your session and release any  associated resources.
     */
    async terminateApplication(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.terminateApplicationRaw(initOverrides);
    }
}
