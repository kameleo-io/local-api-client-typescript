/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    AddProfileToFolderRequest,
    CreateFolderRequest,
    DeleteFolderResponse,
    FolderResponse,
    ListFoldersResponse,
    ProblemResponse,
    ProfileResponse,
    ShareGroupRequest,
    SharingOptionsResponse,
    UpdateFolderRequest,
} from "../models/index";
import {
    AddProfileToFolderRequestFromJSON,
    AddProfileToFolderRequestToJSON,
    CreateFolderRequestFromJSON,
    CreateFolderRequestToJSON,
    DeleteFolderResponseFromJSON,
    DeleteFolderResponseToJSON,
    FolderResponseFromJSON,
    FolderResponseToJSON,
    ListFoldersResponseFromJSON,
    ListFoldersResponseToJSON,
    ProblemResponseFromJSON,
    ProblemResponseToJSON,
    ProfileResponseFromJSON,
    ProfileResponseToJSON,
    ShareGroupRequestFromJSON,
    ShareGroupRequestToJSON,
    SharingOptionsResponseFromJSON,
    SharingOptionsResponseToJSON,
    UpdateFolderRequestFromJSON,
    UpdateFolderRequestToJSON,
} from "../models/index";

export interface AddProfileToFolderOperationRequest {
    guid: string;
    addProfileToFolderRequest?: AddProfileToFolderRequest;
}

export interface CreateFolderOperationRequest {
    createFolderRequest?: CreateFolderRequest;
}

export interface DeleteFolderRequest {
    guid: string;
    includeProfiles?: boolean;
}

export interface ReadFolderRequest {
    guid: string;
}

export interface RemoveProfileFromFolderRequest {
    guid: string;
    profileId: string;
}

export interface ShareGroupOperationRequest {
    guid: string;
    shareGroupRequest?: ShareGroupRequest;
}

export interface UpdateFolderOperationRequest {
    guid: string;
    updateFolderRequest?: UpdateFolderRequest;
}

/**
 *
 */
export class FolderApi extends runtime.BaseAPI {
    /**
     * Adds the given profile to the specified folder.
     */
    async addProfileToFolderRaw(
        requestParameters: AddProfileToFolderOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ProfileResponse>> {
        if (requestParameters["guid"] == null) {
            throw new runtime.RequiredError("guid", 'Required parameter "guid" was null or undefined when calling addProfileToFolder().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/folders/{guid}/add`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters["guid"]))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: AddProfileToFolderRequestToJSON(requestParameters["addProfileToFolderRequest"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileResponseFromJSON(jsonValue));
    }

    /**
     * Adds the given profile to the specified folder.
     */
    async addProfileToFolder(
        guid: string,
        addProfileToFolderRequest?: AddProfileToFolderRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ProfileResponse> {
        const response = await this.addProfileToFolderRaw(
            { guid: guid, addProfileToFolderRequest: addProfileToFolderRequest },
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Create a new folder in your workspace by providing a human-readable name in the request body. Use this to organize your profiles  effectively.
     */
    async createFolderRaw(
        requestParameters: CreateFolderOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FolderResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/folders/new`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: CreateFolderRequestToJSON(requestParameters["createFolderRequest"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderResponseFromJSON(jsonValue));
    }

    /**
     * Create a new folder in your workspace by providing a human-readable name in the request body. Use this to organize your profiles  effectively.
     */
    async createFolder(
        createFolderRequest?: CreateFolderRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<FolderResponse> {
        const response = await this.createFolderRaw({ createFolderRequest: createFolderRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a folder along with all its subfolders. Profiles within the folder will either be deleted or moved to the top-level based on the  query parameters.
     */
    async deleteFolderRaw(
        requestParameters: DeleteFolderRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<DeleteFolderResponse>> {
        if (requestParameters["guid"] == null) {
            throw new runtime.RequiredError("guid", 'Required parameter "guid" was null or undefined when calling deleteFolder().');
        }

        const queryParameters: any = {};

        if (requestParameters["includeProfiles"] != null) {
            queryParameters["includeProfiles"] = requestParameters["includeProfiles"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/folders/{guid}`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters["guid"]))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFolderResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a folder along with all its subfolders. Profiles within the folder will either be deleted or moved to the top-level based on the  query parameters.
     */
    async deleteFolder(
        guid: string,
        includeProfiles?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<DeleteFolderResponse> {
        const response = await this.deleteFolderRaw({ guid: guid, includeProfiles: includeProfiles }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the complete list of folders in your workspace. Use this endpoint to see the entire folder hierarchy - including subfolders and  unassigned profiles.
     */
    async listFoldersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFoldersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/folders`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFoldersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the complete list of folders in your workspace. Use this endpoint to see the entire folder hierarchy - including subfolders and  unassigned profiles.
     */
    async listFolders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFoldersResponse> {
        const response = await this.listFoldersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch detailed information for a specific folder by its unique GUID. Use this to review the folder’s metadata, contained profiles, and  sharing settings.
     */
    async readFolderRaw(
        requestParameters: ReadFolderRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FolderResponse>> {
        if (requestParameters["guid"] == null) {
            throw new runtime.RequiredError("guid", 'Required parameter "guid" was null or undefined when calling readFolder().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/folders/{guid}`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters["guid"]))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderResponseFromJSON(jsonValue));
    }

    /**
     * Fetch detailed information for a specific folder by its unique GUID. Use this to review the folder’s metadata, contained profiles, and  sharing settings.
     */
    async readFolder(guid: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderResponse> {
        const response = await this.readFolderRaw({ guid: guid }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the sharing options available for folders. Use this endpoint to review the list of users and roles that can access your folder  resources.
     */
    async readSharingOptionsRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SharingOptionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/folders/share`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => SharingOptionsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the sharing options available for folders. Use this endpoint to review the list of users and roles that can access your folder  resources.
     */
    async readSharingOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharingOptionsResponse> {
        const response = await this.readSharingOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Removes the given profile from the specified folder.
     */
    async removeProfileFromFolderRaw(
        requestParameters: RemoveProfileFromFolderRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ProfileResponse>> {
        if (requestParameters["guid"] == null) {
            throw new runtime.RequiredError(
                "guid",
                'Required parameter "guid" was null or undefined when calling removeProfileFromFolder().',
            );
        }

        if (requestParameters["profileId"] == null) {
            throw new runtime.RequiredError(
                "profileId",
                'Required parameter "profileId" was null or undefined when calling removeProfileFromFolder().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/folders/{guid}/{profileId}`
                    .replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters["guid"])))
                    .replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters["profileId"]))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileResponseFromJSON(jsonValue));
    }

    /**
     * Removes the given profile from the specified folder.
     */
    async removeProfileFromFolder(
        guid: string,
        profileId: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ProfileResponse> {
        const response = await this.removeProfileFromFolderRaw({ guid: guid, profileId: profileId }, initOverrides);
        return await response.value();
    }

    /**
     * Update the sharing settings for a folder by submitting a list of share access rules (user and role details) in the request body. Use this  to adjust access permissions as needed.
     */
    async shareGroupRaw(
        requestParameters: ShareGroupOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FolderResponse>> {
        if (requestParameters["guid"] == null) {
            throw new runtime.RequiredError("guid", 'Required parameter "guid" was null or undefined when calling shareGroup().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/folders/{guid}/share`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters["guid"]))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ShareGroupRequestToJSON(requestParameters["shareGroupRequest"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderResponseFromJSON(jsonValue));
    }

    /**
     * Update the sharing settings for a folder by submitting a list of share access rules (user and role details) in the request body. Use this  to adjust access permissions as needed.
     */
    async shareGroup(
        guid: string,
        shareGroupRequest?: ShareGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<FolderResponse> {
        const response = await this.shareGroupRaw({ guid: guid, shareGroupRequest: shareGroupRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the details of an existing folder, not including its content.
     */
    async updateFolderRaw(
        requestParameters: UpdateFolderOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FolderResponse>> {
        if (requestParameters["guid"] == null) {
            throw new runtime.RequiredError("guid", 'Required parameter "guid" was null or undefined when calling updateFolder().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/folders/{guid}`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters["guid"]))),
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: UpdateFolderRequestToJSON(requestParameters["updateFolderRequest"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderResponseFromJSON(jsonValue));
    }

    /**
     * Updates the details of an existing folder, not including its content.
     */
    async updateFolder(
        guid: string,
        updateFolderRequest?: UpdateFolderRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<FolderResponse> {
        const response = await this.updateFolderRaw({ guid: guid, updateFolderRequest: updateFolderRequest }, initOverrides);
        return await response.value();
    }
}
