/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { KernelResponse, ProblemDetails, ValidationProblemDetails } from "../models/index";
import {
    KernelResponseFromJSON,
    KernelResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ValidationProblemDetailsFromJSON,
    ValidationProblemDetailsToJSON,
} from "../models/index";

export interface InstallKernelRequest {
    id: string;
}

export interface RemoveKernelRequest {
    id: string;
}

/**
 *
 */
export class KernelApi extends runtime.BaseAPI {
    /**
     * Installs a kernel to the local file system.
     */
    async installKernelRaw(
        requestParameters: InstallKernelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<KernelResponse>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling installKernel().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/kernels/{id}/install`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => KernelResponseFromJSON(jsonValue));
    }

    /**
     * Installs a kernel to the local file system.
     */
    async installKernel(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KernelResponse> {
        const response = await this.installKernelRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of all the available kernels.
     */
    async listKernelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<KernelResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/kernels`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KernelResponseFromJSON));
    }

    /**
     * Gets the list of all the available kernels.
     */
    async listKernels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<KernelResponse>> {
        const response = await this.listKernelsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Removes a kernel from the local file system.
     */
    async removeKernelRaw(
        requestParameters: RemoveKernelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<KernelResponse>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling removeKernel().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/kernels/{id}/remove`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => KernelResponseFromJSON(jsonValue));
    }

    /**
     * Removes a kernel from the local file system.
     */
    async removeKernel(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KernelResponse> {
        const response = await this.removeKernelRaw({ id: id }, initOverrides);
        return await response.value();
    }
}
