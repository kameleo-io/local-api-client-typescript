/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { BrowserCookie, CookieRequest, ProblemResponse } from "../models/index";
import {
    BrowserCookieFromJSON,
    BrowserCookieToJSON,
    CookieRequestFromJSON,
    CookieRequestToJSON,
    ProblemResponseFromJSON,
    ProblemResponseToJSON,
} from "../models/index";

export interface AddCookiesRequest {
    guid: string;
    cookieRequest?: Array<CookieRequest>;
}

export interface DeleteCookiesRequest {
    guid: string;
}

export interface ListCookiesRequest {
    guid: string;
}

/**
 *
 */
export class CookieApi extends runtime.BaseAPI {
    /**
     * Adds a list of cookies to the profile, allowing you to inject cookies before starting the profile. If cookies already exist for a domain,  they will be replaced with the new ones.
     */
    async addCookiesRaw(
        requestParameters: AddCookiesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<BrowserCookie>>> {
        if (requestParameters["guid"] == null) {
            throw new runtime.RequiredError("guid", 'Required parameter "guid" was null or undefined when calling addCookies().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/profiles/{guid}/cookies`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters["guid"]))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["cookieRequest"]!.map(CookieRequestToJSON),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BrowserCookieFromJSON));
    }

    /**
     * Adds a list of cookies to the profile, allowing you to inject cookies before starting the profile. If cookies already exist for a domain,  they will be replaced with the new ones.
     */
    async addCookies(
        guid: string,
        cookieRequest?: Array<CookieRequest>,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<BrowserCookie>> {
        const response = await this.addCookiesRaw({ guid: guid, cookieRequest: cookieRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes all the cookies stored in the profile, which will likely log the profile out of all websites.
     */
    async deleteCookiesRaw(
        requestParameters: DeleteCookiesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["guid"] == null) {
            throw new runtime.RequiredError("guid", 'Required parameter "guid" was null or undefined when calling deleteCookies().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/profiles/{guid}/cookies`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters["guid"]))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes all the cookies stored in the profile, which will likely log the profile out of all websites.
     */
    async deleteCookies(guid: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCookiesRaw({ guid: guid }, initOverrides);
    }

    /**
     * Retrieves the list of cookies stored in the profile\'s browser. Note that this list does not include session cookies, which are not  persisted between browser launches.
     */
    async listCookiesRaw(
        requestParameters: ListCookiesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<BrowserCookie>>> {
        if (requestParameters["guid"] == null) {
            throw new runtime.RequiredError("guid", 'Required parameter "guid" was null or undefined when calling listCookies().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/profiles/{guid}/cookies`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters["guid"]))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BrowserCookieFromJSON));
    }

    /**
     * Retrieves the list of cookies stored in the profile\'s browser. Note that this list does not include session cookies, which are not  persisted between browser launches.
     */
    async listCookies(guid: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BrowserCookie>> {
        const response = await this.listCookiesRaw({ guid: guid }, initOverrides);
        return await response.value();
    }
}
