/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { HardwareConcurrencySpoofingType } from "./HardwareConcurrencySpoofingType";
import {
    HardwareConcurrencySpoofingTypeFromJSON,
    HardwareConcurrencySpoofingTypeFromJSONTyped,
    HardwareConcurrencySpoofingTypeToJSON,
    HardwareConcurrencySpoofingTypeToJSONTyped,
} from "./HardwareConcurrencySpoofingType";

/**
 *
 * @export
 * @interface HardwareConcurrencyChoice
 */
export interface HardwareConcurrencyChoice {
    /**
     * Specifies how the hardwareConcurrency will be spoofed. Possible values:
     * 'automatic': Automatically set the values based on the fingerprint.
     * 'manual': Manually set the value in the profile. Valid values: 1, 2, 4, 8, 12, 16.
     * 'off': Turn off the spoofing, use the original settings.
     * @type {HardwareConcurrencySpoofingType}
     * @memberof HardwareConcurrencyChoice
     */
    value: HardwareConcurrencySpoofingType;
    /**
     *
     * @type {number}
     * @memberof HardwareConcurrencyChoice
     */
    extra?: number | null;
}

/**
 * Check if a given object implements the HardwareConcurrencyChoice interface.
 */
export function instanceOfHardwareConcurrencyChoice(value: object): value is HardwareConcurrencyChoice {
    if (!("value" in value) || value["value"] === undefined) return false;
    return true;
}

export function HardwareConcurrencyChoiceFromJSON(json: any): HardwareConcurrencyChoice {
    return HardwareConcurrencyChoiceFromJSONTyped(json, false);
}

export function HardwareConcurrencyChoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): HardwareConcurrencyChoice {
    if (json == null) {
        return json;
    }
    return {
        value: HardwareConcurrencySpoofingTypeFromJSON(json["value"]),
        extra: json["extra"] == null ? undefined : json["extra"],
    };
}

export function HardwareConcurrencyChoiceToJSON(json: any): HardwareConcurrencyChoice {
    return HardwareConcurrencyChoiceToJSONTyped(json, false);
}

export function HardwareConcurrencyChoiceToJSONTyped(value?: HardwareConcurrencyChoice | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        value: HardwareConcurrencySpoofingTypeToJSON(value["value"]),
        extra: value["extra"],
    };
}
