/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Representation of a cookie.
 * @export
 * @interface BrowserCookie
 */
export interface BrowserCookie {
    /**
     * The domain attribute signifies the domain for which the cookie is valid and can be submitted with every request for this domain or its
     * subdomains. If this attribute is not specified, then the hostname of the originating server is used as the default value.
     * @type {string}
     * @memberof BrowserCookie
     */
    domain: string | null;
    /**
     * The name for the Cookie.
     * @type {string}
     * @memberof BrowserCookie
     */
    name: string | null;
    /**
     * The path attribute indicates a URL path that must exist in the requested URL in order to send the Cookie header. The %x2F ("/") character
     * is considered a directory separator, and subdirectories match as well.
     * @type {string}
     * @memberof BrowserCookie
     */
    path: string | null;
    /**
     * The value of the Cookie.
     * @type {string}
     * @memberof BrowserCookie
     */
    value: string | null;
    /**
     * Host Only cookie means that the cookie should be handled by the browser to the server only to the same host/server that firstly sent it to
     * the browser.
     * @type {boolean}
     * @memberof BrowserCookie
     */
    hostOnly: boolean;
    /**
     * When this attribute is set, client-side scripts are not allowed to access the cookie.
     * @type {boolean}
     * @memberof BrowserCookie
     */
    httpOnly: boolean;
    /**
     * A cookie with the Secure attribute is sent to the server only with an encrypted request over the HTTPS protocol, never with unsecured HTTP,
     * and therefore can't easily be accessed by a man-in-the-middle attacker. Insecure sites (with http: in the URL) can't set cookies with the
     * Secure attribute.
     * @type {boolean}
     * @memberof BrowserCookie
     */
    secure: boolean;
    /**
     * The sameSite attribute lets servers require that a cookie shouldn't be sent with cross-origin requests (where Site is defined by the
     * registrable domain), which provides some protection against cross-site request forgery attacks (CSRF).
     * It takes three possible values: Strict, Lax, and None.With Strict, the cookie is sent only to the same site as the one that originated it;
     * Lax is similar, with an exception for when the user navigates to a URL from an external site, such as by following a link; None has no
     * restrictions on cross-site requests.
     * @type {string}
     * @memberof BrowserCookie
     */
    sameSite: string | null;
    /**
     * This unix timestamp formatted attribute is used to set persistent cookies. It signifies how long the browser should use the persistent
     * cookie and when the cookie should be deleted.
     * If this attribute is not specified, then the lifetime of the cookie is the same as that of browser session, i.e.it will be a non-persistent
     * cookie.
     * @type {number}
     * @memberof BrowserCookie
     */
    expirationDate?: number | null;
    /**
     * Session cookies are deleted when the current session ends. The browser defines when the "current session" ends, and some browsers use
     * session restoring when restarting, which can cause session cookies to last indefinitely long.
     * @type {boolean}
     * @memberof BrowserCookie
     */
    session?: boolean;
    /**
     * The ID of the cookie store containing this cookie.
     * @type {string}
     * @memberof BrowserCookie
     */
    storeId?: string | null;
}

/**
 * Check if a given object implements the BrowserCookie interface.
 */
export function instanceOfBrowserCookie(value: object): value is BrowserCookie {
    if (!("domain" in value) || value["domain"] === undefined) return false;
    if (!("name" in value) || value["name"] === undefined) return false;
    if (!("path" in value) || value["path"] === undefined) return false;
    if (!("value" in value) || value["value"] === undefined) return false;
    if (!("hostOnly" in value) || value["hostOnly"] === undefined) return false;
    if (!("httpOnly" in value) || value["httpOnly"] === undefined) return false;
    if (!("secure" in value) || value["secure"] === undefined) return false;
    if (!("sameSite" in value) || value["sameSite"] === undefined) return false;
    return true;
}

export function BrowserCookieFromJSON(json: any): BrowserCookie {
    return BrowserCookieFromJSONTyped(json, false);
}

export function BrowserCookieFromJSONTyped(json: any, ignoreDiscriminator: boolean): BrowserCookie {
    if (json == null) {
        return json;
    }
    return {
        domain: json["domain"],
        name: json["name"],
        path: json["path"],
        value: json["value"],
        hostOnly: json["hostOnly"],
        httpOnly: json["httpOnly"],
        secure: json["secure"],
        sameSite: json["sameSite"],
        expirationDate: json["expirationDate"] == null ? undefined : json["expirationDate"],
        session: json["session"] == null ? undefined : json["session"],
        storeId: json["storeId"] == null ? undefined : json["storeId"],
    };
}

export function BrowserCookieToJSON(json: any): BrowserCookie {
    return BrowserCookieToJSONTyped(json, false);
}

export function BrowserCookieToJSONTyped(value?: BrowserCookie | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        domain: value["domain"],
        name: value["name"],
        path: value["path"],
        value: value["value"],
        hostOnly: value["hostOnly"],
        httpOnly: value["httpOnly"],
        secure: value["secure"],
        sameSite: value["sameSite"],
        expirationDate: value["expirationDate"],
        session: value["session"],
        storeId: value["storeId"],
    };
}
