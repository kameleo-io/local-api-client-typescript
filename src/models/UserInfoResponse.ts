/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { RunningProfilesStatistics } from "./RunningProfilesStatistics";
import {
    RunningProfilesStatisticsFromJSON,
    RunningProfilesStatisticsFromJSONTyped,
    RunningProfilesStatisticsToJSON,
    RunningProfilesStatisticsToJSONTyped,
} from "./RunningProfilesStatistics";
import type { QuotaStatistics } from "./QuotaStatistics";
import {
    QuotaStatisticsFromJSON,
    QuotaStatisticsFromJSONTyped,
    QuotaStatisticsToJSON,
    QuotaStatisticsToJSONTyped,
} from "./QuotaStatistics";

/**
 *
 * @export
 * @interface UserInfoResponse
 */
export interface UserInfoResponse {
    /**
     * Unique identifier for the user in Guid v4 format.
     * @type {string}
     * @memberof UserInfoResponse
     */
    userId: string;
    /**
     * The display name of the user, updated on each login.
     * @type {string}
     * @memberof UserInfoResponse
     */
    displayName: string | null;
    /**
     * The email address of the user.
     * @type {string}
     * @memberof UserInfoResponse
     */
    email: string | null;
    /**
     * Indicates if the user's email address has been verified.
     * @type {boolean}
     * @memberof UserInfoResponse
     */
    emailConfirmed: boolean;
    /**
     * The subscription end date for the user. If the user is part of a team, this is the team's subscription end date.
     * @type {Date}
     * @memberof UserInfoResponse
     */
    subscriptionEnd: Date;
    /**
     * List of features available to the user based on their current subscription or their team's subscription.
     * @type {Array<string>}
     * @memberof UserInfoResponse
     */
    capabilities: Array<string> | null;
    /**
     * Indicates if the user's subscription is currently in a grace period and requires instant renewal.
     * @type {boolean}
     * @memberof UserInfoResponse
     */
    gracePeriod: boolean;
    /**
     * The date and time of the user's last login via the app.
     * @type {Date}
     * @memberof UserInfoResponse
     */
    lastAppLogin: Date;
    /**
     * Path to the user's workspace folder where profiles are stored. Modifying these files outside of Kameleo is strictly prohibited.
     * @type {string}
     * @memberof UserInfoResponse
     */
    workspaceFolder: string | null;
    /**
     *
     * @type {QuotaStatistics}
     * @memberof UserInfoResponse
     */
    localStorage: QuotaStatistics;
    /**
     *
     * @type {QuotaStatistics}
     * @memberof UserInfoResponse
     */
    cloudStorage: QuotaStatistics;
    /**
     * Indicates if the user has a team subscription. This can also be true if the user does not have any team members yet.
     * @type {boolean}
     * @memberof UserInfoResponse
     */
    hasTeamSubscription: boolean;
    /**
     * The team ID if the user is part of a team.
     * @type {string}
     * @memberof UserInfoResponse
     */
    teamId: string | null;
    /**
     * The user's role within the team, such as 'owner' or 'member'.
     * @type {string}
     * @memberof UserInfoResponse
     */
    teamRole: string | null;
    /**
     *
     * @type {RunningProfilesStatistics}
     * @memberof UserInfoResponse
     */
    userProfiles?: RunningProfilesStatistics;
    /**
     *
     * @type {RunningProfilesStatistics}
     * @memberof UserInfoResponse
     */
    teamProfiles?: RunningProfilesStatistics;
}

/**
 * Check if a given object implements the UserInfoResponse interface.
 */
export function instanceOfUserInfoResponse(value: object): value is UserInfoResponse {
    if (!("userId" in value) || value["userId"] === undefined) return false;
    if (!("displayName" in value) || value["displayName"] === undefined) return false;
    if (!("email" in value) || value["email"] === undefined) return false;
    if (!("emailConfirmed" in value) || value["emailConfirmed"] === undefined) return false;
    if (!("subscriptionEnd" in value) || value["subscriptionEnd"] === undefined) return false;
    if (!("capabilities" in value) || value["capabilities"] === undefined) return false;
    if (!("gracePeriod" in value) || value["gracePeriod"] === undefined) return false;
    if (!("lastAppLogin" in value) || value["lastAppLogin"] === undefined) return false;
    if (!("workspaceFolder" in value) || value["workspaceFolder"] === undefined) return false;
    if (!("localStorage" in value) || value["localStorage"] === undefined) return false;
    if (!("cloudStorage" in value) || value["cloudStorage"] === undefined) return false;
    if (!("hasTeamSubscription" in value) || value["hasTeamSubscription"] === undefined) return false;
    if (!("teamId" in value) || value["teamId"] === undefined) return false;
    if (!("teamRole" in value) || value["teamRole"] === undefined) return false;
    return true;
}

export function UserInfoResponseFromJSON(json: any): UserInfoResponse {
    return UserInfoResponseFromJSONTyped(json, false);
}

export function UserInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserInfoResponse {
    if (json == null) {
        return json;
    }
    return {
        userId: json["userId"],
        displayName: json["displayName"],
        email: json["email"],
        emailConfirmed: json["emailConfirmed"],
        subscriptionEnd: new Date(json["subscriptionEnd"]),
        capabilities: json["capabilities"] == null ? null : json["capabilities"],
        gracePeriod: json["gracePeriod"],
        lastAppLogin: new Date(json["lastAppLogin"]),
        workspaceFolder: json["workspaceFolder"],
        localStorage: QuotaStatisticsFromJSON(json["localStorage"]),
        cloudStorage: QuotaStatisticsFromJSON(json["cloudStorage"]),
        hasTeamSubscription: json["hasTeamSubscription"],
        teamId: json["teamId"],
        teamRole: json["teamRole"],
        userProfiles: json["userProfiles"] == null ? undefined : RunningProfilesStatisticsFromJSON(json["userProfiles"]),
        teamProfiles: json["teamProfiles"] == null ? undefined : RunningProfilesStatisticsFromJSON(json["teamProfiles"]),
    };
}

export function UserInfoResponseToJSON(json: any): UserInfoResponse {
    return UserInfoResponseToJSONTyped(json, false);
}

export function UserInfoResponseToJSONTyped(value?: UserInfoResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        userId: value["userId"],
        displayName: value["displayName"],
        email: value["email"],
        emailConfirmed: value["emailConfirmed"],
        subscriptionEnd: value["subscriptionEnd"].toISOString(),
        capabilities: value["capabilities"],
        gracePeriod: value["gracePeriod"],
        lastAppLogin: value["lastAppLogin"].toISOString(),
        workspaceFolder: value["workspaceFolder"],
        localStorage: QuotaStatisticsToJSON(value["localStorage"]),
        cloudStorage: QuotaStatisticsToJSON(value["cloudStorage"]),
        hasTeamSubscription: value["hasTeamSubscription"],
        teamId: value["teamId"],
        teamRole: value["teamRole"],
        userProfiles: RunningProfilesStatisticsToJSON(value["userProfiles"]),
        teamProfiles: RunningProfilesStatisticsToJSON(value["teamProfiles"]),
    };
}
