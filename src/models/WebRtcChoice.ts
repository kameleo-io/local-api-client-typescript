/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { WebRtcSpoofingOptions } from "./WebRtcSpoofingOptions";
import {
    WebRtcSpoofingOptionsFromJSON,
    WebRtcSpoofingOptionsFromJSONTyped,
    WebRtcSpoofingOptionsToJSON,
    WebRtcSpoofingOptionsToJSONTyped,
} from "./WebRtcSpoofingOptions";
import type { WebRtcSpoofingType } from "./WebRtcSpoofingType";
import {
    WebRtcSpoofingTypeFromJSON,
    WebRtcSpoofingTypeFromJSONTyped,
    WebRtcSpoofingTypeToJSON,
    WebRtcSpoofingTypeToJSONTyped,
} from "./WebRtcSpoofingType";

/**
 *
 * @export
 * @interface WebRtcChoice
 */
export interface WebRtcChoice {
    /**
     * Specifies how the WebRTC will be spoofed. Possible values:
     * 'automatic': Automatically set the webRTC public IP by the IP
     * 'manual': Manually override the webRTC public IP and private IP in the profile
     * 'block': Block the WebRTC functionality
     * 'off': Turn off the spoofing, use the original settings
     * @type {WebRtcSpoofingType}
     * @memberof WebRtcChoice
     */
    value: WebRtcSpoofingType;
    /**
     * When the WebRTC spoofing is set to manual these extra settings will be used as well.
     * @type {WebRtcSpoofingOptions}
     * @memberof WebRtcChoice
     */
    extra?: WebRtcSpoofingOptions | null;
}

/**
 * Check if a given object implements the WebRtcChoice interface.
 */
export function instanceOfWebRtcChoice(value: object): value is WebRtcChoice {
    if (!("value" in value) || value["value"] === undefined) return false;
    return true;
}

export function WebRtcChoiceFromJSON(json: any): WebRtcChoice {
    return WebRtcChoiceFromJSONTyped(json, false);
}

export function WebRtcChoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebRtcChoice {
    if (json == null) {
        return json;
    }
    return {
        value: WebRtcSpoofingTypeFromJSON(json["value"]),
        extra: json["extra"] == null ? undefined : WebRtcSpoofingOptionsFromJSON(json["extra"]),
    };
}

export function WebRtcChoiceToJSON(json: any): WebRtcChoice {
    return WebRtcChoiceToJSONTyped(json, false);
}

export function WebRtcChoiceToJSONTyped(value?: WebRtcChoice | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        value: WebRtcSpoofingTypeToJSON(value["value"]),
        extra: WebRtcSpoofingOptionsToJSON(value["extra"]),
    };
}
