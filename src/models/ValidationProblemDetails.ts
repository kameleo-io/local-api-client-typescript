/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface ValidationProblemDetails
 */
export interface ValidationProblemDetails {
    [key: string]: any | any;
    /**
     *
     * @type {string}
     * @memberof ValidationProblemDetails
     */
    type?: string | null;
    /**
     *
     * @type {string}
     * @memberof ValidationProblemDetails
     */
    title?: string | null;
    /**
     *
     * @type {number}
     * @memberof ValidationProblemDetails
     */
    status?: number | null;
    /**
     *
     * @type {string}
     * @memberof ValidationProblemDetails
     */
    detail?: string | null;
    /**
     *
     * @type {string}
     * @memberof ValidationProblemDetails
     */
    instance?: string | null;
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ValidationProblemDetails
     */
    errors?: { [key: string]: Array<string> };
}

/**
 * Check if a given object implements the ValidationProblemDetails interface.
 */
export function instanceOfValidationProblemDetails(value: object): value is ValidationProblemDetails {
    return true;
}

export function ValidationProblemDetailsFromJSON(json: any): ValidationProblemDetails {
    return ValidationProblemDetailsFromJSONTyped(json, false);
}

export function ValidationProblemDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValidationProblemDetails {
    if (json == null) {
        return json;
    }
    return {
        ...json,
        type: json["type"] == null ? undefined : json["type"],
        title: json["title"] == null ? undefined : json["title"],
        status: json["status"] == null ? undefined : json["status"],
        detail: json["detail"] == null ? undefined : json["detail"],
        instance: json["instance"] == null ? undefined : json["instance"],
        errors: json["errors"] == null ? undefined : json["errors"],
    };
}

export function ValidationProblemDetailsToJSON(json: any): ValidationProblemDetails {
    return ValidationProblemDetailsToJSONTyped(json, false);
}

export function ValidationProblemDetailsToJSONTyped(value?: ValidationProblemDetails | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...value,
        type: value["type"],
        title: value["title"],
        status: value["status"],
        detail: value["detail"],
        instance: value["instance"],
        errors: value["errors"],
    };
}
