/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Os } from "./Os";
import { OsFromJSON, OsFromJSONTyped, OsToJSON, OsToJSONTyped } from "./Os";
import type { Device } from "./Device";
import { DeviceFromJSON, DeviceFromJSONTyped, DeviceToJSON, DeviceToJSONTyped } from "./Device";
import type { ProxyChoice } from "./ProxyChoice";
import { ProxyChoiceFromJSON, ProxyChoiceFromJSONTyped, ProxyChoiceToJSON, ProxyChoiceToJSONTyped } from "./ProxyChoice";
import type { ProfileStorageLocation } from "./ProfileStorageLocation";
import {
    ProfileStorageLocationFromJSON,
    ProfileStorageLocationFromJSONTyped,
    ProfileStorageLocationToJSON,
    ProfileStorageLocationToJSONTyped,
} from "./ProfileStorageLocation";
import type { StatusResponse } from "./StatusResponse";
import { StatusResponseFromJSON, StatusResponseFromJSONTyped, StatusResponseToJSON, StatusResponseToJSONTyped } from "./StatusResponse";
import type { Browser } from "./Browser";
import { BrowserFromJSON, BrowserFromJSONTyped, BrowserToJSON, BrowserToJSONTyped } from "./Browser";

/**
 * A preview about the profile with some of its properties.
 * @export
 * @interface ProfilePreview
 */
export interface ProfilePreview {
    /**
     * A unique identifier of the profile
     * @type {string}
     * @memberof ProfilePreview
     */
    id: string;
    /**
     * The name of the profile
     * @type {string}
     * @memberof ProfilePreview
     */
    name: string | null;
    /**
     * Profile tags
     * @type {Array<string>}
     * @memberof ProfilePreview
     */
    tags: Array<string> | null;
    /**
     *
     * @type {ProxyChoice}
     * @memberof ProfilePreview
     */
    proxy: ProxyChoice;
    /**
     * Date when the profile was created.
     * @type {Date}
     * @memberof ProfilePreview
     */
    createdAt: Date;
    /**
     *
     * @type {Device}
     * @memberof ProfilePreview
     */
    device: Device;
    /**
     *
     * @type {Os}
     * @memberof ProfilePreview
     */
    os: Os;
    /**
     *
     * @type {Browser}
     * @memberof ProfilePreview
     */
    browser: Browser;
    /**
     * Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.
     * @type {string}
     * @memberof ProfilePreview
     */
    language: string | null;
    /**
     *
     * @type {StatusResponse}
     * @memberof ProfilePreview
     */
    status: StatusResponse;
    /**
     *
     * @type {ProfileStorageLocation}
     * @memberof ProfilePreview
     */
    storage?: ProfileStorageLocation;
    /**
     * A unique identifier of the containing folder, or null if not in a folder. This will always be null for locally stored profiles, as only
     * cloud profiles can be added to folders.
     * @type {string}
     * @memberof ProfilePreview
     */
    folderId?: string | null;
}

/**
 * Check if a given object implements the ProfilePreview interface.
 */
export function instanceOfProfilePreview(value: object): value is ProfilePreview {
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("name" in value) || value["name"] === undefined) return false;
    if (!("tags" in value) || value["tags"] === undefined) return false;
    if (!("proxy" in value) || value["proxy"] === undefined) return false;
    if (!("createdAt" in value) || value["createdAt"] === undefined) return false;
    if (!("device" in value) || value["device"] === undefined) return false;
    if (!("os" in value) || value["os"] === undefined) return false;
    if (!("browser" in value) || value["browser"] === undefined) return false;
    if (!("language" in value) || value["language"] === undefined) return false;
    if (!("status" in value) || value["status"] === undefined) return false;
    return true;
}

export function ProfilePreviewFromJSON(json: any): ProfilePreview {
    return ProfilePreviewFromJSONTyped(json, false);
}

export function ProfilePreviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfilePreview {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"],
        name: json["name"],
        tags: json["tags"] == null ? null : json["tags"],
        proxy: ProxyChoiceFromJSON(json["proxy"]),
        createdAt: new Date(json["createdAt"]),
        device: DeviceFromJSON(json["device"]),
        os: OsFromJSON(json["os"]),
        browser: BrowserFromJSON(json["browser"]),
        language: json["language"],
        status: StatusResponseFromJSON(json["status"]),
        storage: json["storage"] == null ? undefined : ProfileStorageLocationFromJSON(json["storage"]),
        folderId: json["folderId"] == null ? undefined : json["folderId"],
    };
}

export function ProfilePreviewToJSON(json: any): ProfilePreview {
    return ProfilePreviewToJSONTyped(json, false);
}

export function ProfilePreviewToJSONTyped(value?: ProfilePreview | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        name: value["name"],
        tags: value["tags"],
        proxy: ProxyChoiceToJSON(value["proxy"]),
        createdAt: value["createdAt"].toISOString(),
        device: DeviceToJSON(value["device"]),
        os: OsToJSON(value["os"]),
        browser: BrowserToJSON(value["browser"]),
        language: value["language"],
        status: StatusResponseToJSON(value["status"]),
        storage: ProfileStorageLocationToJSON(value["storage"]),
        folderId: value["folderId"],
    };
}
