/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ProfilePreview } from "./ProfilePreview";
import { ProfilePreviewFromJSON, ProfilePreviewFromJSONTyped, ProfilePreviewToJSON, ProfilePreviewToJSONTyped } from "./ProfilePreview";
import type { FolderResponse } from "./FolderResponse";
import { FolderResponseFromJSON, FolderResponseFromJSONTyped, FolderResponseToJSON, FolderResponseToJSONTyped } from "./FolderResponse";

/**
 *
 * @export
 * @interface ListFoldersResponse
 */
export interface ListFoldersResponse {
    /**
     * List of top-level folders, each folder may contain nested folders and cloud profiles.
     * @type {Array<FolderResponse>}
     * @memberof ListFoldersResponse
     */
    folders: Array<FolderResponse> | null;
    /**
     * List of profiles not associated with any folder. This includes both cloud and local profiles.
     * @type {Array<ProfilePreview>}
     * @memberof ListFoldersResponse
     */
    profiles: Array<ProfilePreview> | null;
}

/**
 * Check if a given object implements the ListFoldersResponse interface.
 */
export function instanceOfListFoldersResponse(value: object): value is ListFoldersResponse {
    if (!("folders" in value) || value["folders"] === undefined) return false;
    if (!("profiles" in value) || value["profiles"] === undefined) return false;
    return true;
}

export function ListFoldersResponseFromJSON(json: any): ListFoldersResponse {
    return ListFoldersResponseFromJSONTyped(json, false);
}

export function ListFoldersResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListFoldersResponse {
    if (json == null) {
        return json;
    }
    return {
        folders: json["folders"] == null ? null : (json["folders"] as Array<any>).map(FolderResponseFromJSON),
        profiles: json["profiles"] == null ? null : (json["profiles"] as Array<any>).map(ProfilePreviewFromJSON),
    };
}

export function ListFoldersResponseToJSON(json: any): ListFoldersResponse {
    return ListFoldersResponseToJSONTyped(json, false);
}

export function ListFoldersResponseToJSONTyped(value?: ListFoldersResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        folders: value["folders"] == null ? null : (value["folders"] as Array<any>).map(FolderResponseToJSON),
        profiles: value["profiles"] == null ? null : (value["profiles"] as Array<any>).map(ProfilePreviewToJSON),
    };
}
