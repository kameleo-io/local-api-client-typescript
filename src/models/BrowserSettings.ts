/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Preference } from "./Preference";
import { PreferenceFromJSON, PreferenceFromJSONTyped, PreferenceToJSON, PreferenceToJSONTyped } from "./Preference";

/**
 * Extra settings and preferences that can be applied to the browser at startup.
 * @export
 * @interface BrowserSettings
 */
export interface BrowserSettings {
    /**
     * Command line arguments that can be passed to the browser at startup. This applies to both Chroma and Junglefox browsers. Do not include the
     * starting double dash (--).
     * @type {Array<string>}
     * @memberof BrowserSettings
     */
    arguments?: Array<string> | null;
    /**
     * List of preferences for browsers that can be passed at startup. In case of Chromium based options it will be a user profile preference. In
     * case of Firefox profiles it will be a preference.
     * @type {Array<Preference>}
     * @memberof BrowserSettings
     */
    preferences?: Array<Preference> | null;
    /**
     * Special options available only in Kameleo, such as device scale factor for mobile emulated profiles. See the docs for more details.
     * @type {Array<Preference>}
     * @memberof BrowserSettings
     */
    additionalOptions?: Array<Preference> | null;
}

/**
 * Check if a given object implements the BrowserSettings interface.
 */
export function instanceOfBrowserSettings(value: object): value is BrowserSettings {
    return true;
}

export function BrowserSettingsFromJSON(json: any): BrowserSettings {
    return BrowserSettingsFromJSONTyped(json, false);
}

export function BrowserSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BrowserSettings {
    if (json == null) {
        return json;
    }
    return {
        arguments: json["arguments"] == null ? undefined : json["arguments"],
        preferences: json["preferences"] == null ? undefined : (json["preferences"] as Array<any>).map(PreferenceFromJSON),
        additionalOptions:
            json["additionalOptions"] == null ? undefined : (json["additionalOptions"] as Array<any>).map(PreferenceFromJSON),
    };
}

export function BrowserSettingsToJSON(json: any): BrowserSettings {
    return BrowserSettingsToJSONTyped(json, false);
}

export function BrowserSettingsToJSONTyped(value?: BrowserSettings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        arguments: value["arguments"],
        preferences: value["preferences"] == null ? undefined : (value["preferences"] as Array<any>).map(PreferenceToJSON),
        additionalOptions:
            value["additionalOptions"] == null ? undefined : (value["additionalOptions"] as Array<any>).map(PreferenceToJSON),
    };
}
