/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface KernelResponse
 */
export interface KernelResponse {
    /**
     * Unique identifier of the kernel.
     * @type {string}
     * @memberof KernelResponse
     */
    id: string;
    /**
     * The operating system this kernel supports (e.g: win-x64, osx-arm64).
     * @type {string}
     * @memberof KernelResponse
     */
    platform: string;
    /**
     * The browser this kernel contains (e.g: chroma, junglefox).
     * @type {string}
     * @memberof KernelResponse
     */
    browser: string;
    /**
     * Version of the browser.
     * @type {string}
     * @memberof KernelResponse
     */
    version: string;
    /**
     * Build timestamp of the kernel.
     * @type {Date}
     * @memberof KernelResponse
     */
    builtAt: Date;
    /**
     * Size of the download package in bytes.
     * @type {number}
     * @memberof KernelResponse
     */
    downloadSize: number;
    /**
     * Size of the extracted package on the local file system in bytes or null if the kernel is not installed.
     * @type {number}
     * @memberof KernelResponse
     */
    diskSize?: number | null;
    /**
     * Flag indicating if the kernel is locally available (true) or it has to be installed before usage (false).
     * @type {boolean}
     * @memberof KernelResponse
     */
    isInstalled: boolean;
    /**
     * Flag indicating if the kernel is currently in use.
     * @type {boolean}
     * @memberof KernelResponse
     */
    isInUse: boolean;
    /**
     * Flag indicating that the kernel will be removed from the local file system when it is not in use.
     * @type {boolean}
     * @memberof KernelResponse
     */
    isMarkedForRemoval: boolean;
}

/**
 * Check if a given object implements the KernelResponse interface.
 */
export function instanceOfKernelResponse(value: object): value is KernelResponse {
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("platform" in value) || value["platform"] === undefined) return false;
    if (!("browser" in value) || value["browser"] === undefined) return false;
    if (!("version" in value) || value["version"] === undefined) return false;
    if (!("builtAt" in value) || value["builtAt"] === undefined) return false;
    if (!("downloadSize" in value) || value["downloadSize"] === undefined) return false;
    if (!("isInstalled" in value) || value["isInstalled"] === undefined) return false;
    if (!("isInUse" in value) || value["isInUse"] === undefined) return false;
    if (!("isMarkedForRemoval" in value) || value["isMarkedForRemoval"] === undefined) return false;
    return true;
}

export function KernelResponseFromJSON(json: any): KernelResponse {
    return KernelResponseFromJSONTyped(json, false);
}

export function KernelResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): KernelResponse {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"],
        platform: json["platform"],
        browser: json["browser"],
        version: json["version"],
        builtAt: new Date(json["builtAt"]),
        downloadSize: json["downloadSize"],
        diskSize: json["diskSize"] == null ? undefined : json["diskSize"],
        isInstalled: json["isInstalled"],
        isInUse: json["isInUse"],
        isMarkedForRemoval: json["isMarkedForRemoval"],
    };
}

export function KernelResponseToJSON(json: any): KernelResponse {
    return KernelResponseToJSONTyped(json, false);
}

export function KernelResponseToJSONTyped(value?: KernelResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        platform: value["platform"],
        browser: value["browser"],
        version: value["version"],
        builtAt: value["builtAt"].toISOString(),
        downloadSize: value["downloadSize"],
        diskSize: value["diskSize"],
        isInstalled: value["isInstalled"],
        isInUse: value["isInUse"],
        isMarkedForRemoval: value["isMarkedForRemoval"],
    };
}
