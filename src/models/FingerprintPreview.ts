/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Os } from "./Os";
import { OsFromJSON, OsFromJSONTyped, OsToJSON, OsToJSONTyped } from "./Os";
import type { Device } from "./Device";
import { DeviceFromJSON, DeviceFromJSONTyped, DeviceToJSON, DeviceToJSONTyped } from "./Device";
import type { WebglMeta } from "./WebglMeta";
import { WebglMetaFromJSON, WebglMetaFromJSONTyped, WebglMetaToJSON, WebglMetaToJSONTyped } from "./WebglMeta";
import type { Browser } from "./Browser";
import { BrowserFromJSON, BrowserFromJSONTyped, BrowserToJSON, BrowserToJSONTyped } from "./Browser";

/**
 * Provides a summarized view of a fingerprint, which encapsulates real-world browser fingerprint configurations used to
 * instantiate virtual browser profiles. This preview aids in selecting the appropriate fingerprint from hundreds of thousands available.
 * @export
 * @interface FingerprintPreview
 */
export interface FingerprintPreview {
    /**
     * The unique identifier of the fingerprint. You can use this as a reference to create a new profile from this fingerprint.
     * @type {string}
     * @memberof FingerprintPreview
     */
    id: string | null;
    /**
     *
     * @type {Device}
     * @memberof FingerprintPreview
     */
    device: Device;
    /**
     *
     * @type {Os}
     * @memberof FingerprintPreview
     */
    os: Os;
    /**
     *
     * @type {Browser}
     * @memberof FingerprintPreview
     */
    browser: Browser;
    /**
     *
     * @type {WebglMeta}
     * @memberof FingerprintPreview
     */
    webglMeta: WebglMeta;
}

/**
 * Check if a given object implements the FingerprintPreview interface.
 */
export function instanceOfFingerprintPreview(value: object): value is FingerprintPreview {
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("device" in value) || value["device"] === undefined) return false;
    if (!("os" in value) || value["os"] === undefined) return false;
    if (!("browser" in value) || value["browser"] === undefined) return false;
    if (!("webglMeta" in value) || value["webglMeta"] === undefined) return false;
    return true;
}

export function FingerprintPreviewFromJSON(json: any): FingerprintPreview {
    return FingerprintPreviewFromJSONTyped(json, false);
}

export function FingerprintPreviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): FingerprintPreview {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"],
        device: DeviceFromJSON(json["device"]),
        os: OsFromJSON(json["os"]),
        browser: BrowserFromJSON(json["browser"]),
        webglMeta: WebglMetaFromJSON(json["webglMeta"]),
    };
}

export function FingerprintPreviewToJSON(json: any): FingerprintPreview {
    return FingerprintPreviewToJSONTyped(json, false);
}

export function FingerprintPreviewToJSONTyped(value?: FingerprintPreview | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        id: value["id"],
        device: DeviceToJSON(value["device"]),
        os: OsToJSON(value["os"]),
        browser: BrowserToJSON(value["browser"]),
        webglMeta: WebglMetaToJSON(value["webglMeta"]),
    };
}
