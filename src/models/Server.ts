/* tslint:disable */
/* eslint-disable */
/**
 * kameleo-local-api
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Represents a server connection. It can be used as a proxy server connection as well.
 * @export
 * @interface Server
 */
export interface Server {
    /**
     * Gets or sets the hostname where the service is provided from.
     * @type {string}
     * @memberof Server
     */
    host: string | null;
    /**
     * Gets or sets the port where the service is provided from.
     * @type {number}
     * @memberof Server
     */
    port: number;
    /**
     * Gets or sets the identity information provided for the service. This could be a custom id or username or anything which identifies a
     * resource on the remote service. Use it as a proxy username. This field is optional.
     * @type {string}
     * @memberof Server
     */
    id?: string | null;
    /**
     * Gets or sets the shared secret between the client and the service provider. Use it as a proxy password. This field is optional.
     * @type {string}
     * @memberof Server
     */
    secret?: string | null;
}

/**
 * Check if a given object implements the Server interface.
 */
export function instanceOfServer(value: object): value is Server {
    if (!("host" in value) || value["host"] === undefined) return false;
    if (!("port" in value) || value["port"] === undefined) return false;
    return true;
}

export function ServerFromJSON(json: any): Server {
    return ServerFromJSONTyped(json, false);
}

export function ServerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Server {
    if (json == null) {
        return json;
    }
    return {
        host: json["host"],
        port: json["port"],
        id: json["id"] == null ? undefined : json["id"],
        secret: json["secret"] == null ? undefined : json["secret"],
    };
}

export function ServerToJSON(json: any): Server {
    return ServerToJSONTyped(json, false);
}

export function ServerToJSONTyped(value?: Server | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        host: value["host"],
        port: value["port"],
        id: value["id"],
        secret: value["secret"],
    };
}
